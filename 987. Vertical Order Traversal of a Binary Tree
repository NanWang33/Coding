/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
//     public List<List<Integer>> verticalTraversal(TreeNode root) {
//         TreeMap<Integer, List<Position>> map = new TreeMap<Integer, List<Position>>();
//         addNode(root, 0, 0, map);
//         List<List<Integer>> res = new ArrayList<List<Integer>>();
//         while(map.size() > 0) {
//             int key = map.firstKey();
//             List<Integer> one = new ArrayList<Integer>();
//             List<Position> cur = map.get(key);
//             Collections.sort(cur);
//             for (Position p : cur) {
//                 one.add(p.val);
//             }
//             res.add(one);
//             map.remove(key);
//         }
//         return res;
//     }
    
//     private void addNode(TreeNode root, int x, int y, TreeMap<Integer, List<Position>> map) {
//         if (root == null) return;
//         List<Position> vals = map.getOrDefault(x, new ArrayList<Position>());
//         vals.add(new Position(x, y, root.val));
//         map.put(x, vals);
//         addNode(root.left, x-1, y-1, map);
//         addNode(root.right, x+1, y-1, map);
//     }
    
//     class Position implements Comparable<Position> {
//         int x;
//         int y;
//         int val;
//         public Position(int xx, int yy, int value) {
//             x = xx;
//             y = yy;
//             val = value;
//         }
        
//         @Override
//         public int compareTo(Position other) {
//             if (y == other.y) return val - other.val;
//             return other.y - y;
//         }
//     }
    
        public List<List<Integer>> verticalTraversal(TreeNode root) {
        TreeMap<Integer, TreeMap<Integer, PriorityQueue<Integer>>> map = new TreeMap<>();
        dfs(root, 0, 0, map);
        List<List<Integer>> list = new ArrayList<>();
        for (TreeMap<Integer, PriorityQueue<Integer>> ys : map.values()) {
            list.add(new ArrayList<>());
            for (PriorityQueue<Integer> nodes : ys.values()) {
                while (!nodes.isEmpty()) {
                    list.get(list.size() - 1).add(nodes.poll());
                }
            }
        }
        return list;
    }
    
    private void dfs(TreeNode root, int x, int y, TreeMap<Integer, TreeMap<Integer, PriorityQueue<Integer>>> map) {
        if (root == null) {
            return;
        }
        if (!map.containsKey(x)) {
            map.put(x, new TreeMap<>());
        }
        if (!map.get(x).containsKey(y)) {
            map.get(x).put(y, new PriorityQueue<>());
        }
        map.get(x).get(y).offer(root.val);
        dfs(root.left, x - 1, y + 1, map);
        dfs(root.right, x + 1, y + 1, map);
    }
}
