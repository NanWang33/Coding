/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {

    //21ms, take advantage of #57
    //merge a list of elements -> add them one by one
    public List<Interval> merge(List<Interval> intervals) {
        List<Interval> result = new ArrayList<Interval>();
        
        for (int i = 0; i < intervals.size(); i++) {
            result = insert(result, intervals.get(i));
        }
        
        return result;

    }
    
    private List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        List<Interval> result = new ArrayList<Interval>();
        
        if (intervals == null || intervals.size() == 0) {
            result.add(newInterval); return result;
        }
        
        Interval temp = newInterval;
        boolean addedTemp = false;
        int i = 0;
        while(i < intervals.size()) {
            Interval one = intervals.get(i);
            if (one.end < temp.start) result.add(one);
            else if (one.start > temp.end) {
                if (!addedTemp) {
                    result.add(temp);
                    result.add(one);
                    addedTemp = true;
                } else {
                    result.add(one);
                }
            } else {
                temp = new Interval(Math.min(temp.start, one.start), Math.max(temp.end, one.end));
            }
            i++;
        }
        if (!addedTemp) result.add(temp);
        return result;
    }
}
