class Solution {
    //Binary Search, Time out, O(nlgn)
    // public int hIndex(int[] citations) {
    //     int l = 0;
    //     int r = citations.length;
    //     while(l <= r) {
    //         int m = l + (l - r)/2;
    //         int c = 0;
    //         for (int i = 0; i < citations.length; i++) {
    //             if (citations[i] >= m) c++;
    //         }
    //         if (c <= m) r = m - 1;
    //         else l = m + 1;
    //     }
    //     return l;
    // }
    
    //Bucket, O(n) with space O(max)
    public int hIndex(int[] citations) {
        if (citations == null || citations.length == 0) return 0;
        
        int max = 0;
        for (int i = 0; i < citations.length; i++) {
            if (citations[i] > max) max = citations[i];
        }
        int[] bucket = new int[max+1];
        for (int i = 0; i < citations.length; i++) {
            int val = citations[i];
            bucket[val] = bucket[val] + 1;
        }
        int sum = 0;
        for (int i = max; i >=0 ; i--) {
            sum += bucket[i];
            if (sum >= i) return i;
        }
        return 0;
    }
}
