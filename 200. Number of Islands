import java.awt.Point;

class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null) return 0;

        int count = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j]=='1') {
                    fill(grid, i, j);
                    count++;
                }
            }
        }
        return count;
    }
    
    //BFS
    private void fill(char[][]grid, int i, int j) {
        Queue<Point> queue = new LinkedList<Point>();
        queue.add(new Point(i,j));
        grid[i][j] = '0';
        while(!queue.isEmpty()){
            Point cur = queue.poll();
            int x = (int)cur.getX();
            int y = (int)cur.getY();
            if (x-1 >= 0 && grid[x-1][y] == '1'){
                queue.add(new Point(x-1, y));
                grid[x-1][y] = '0';
            }
            if (x+1 < grid.length && grid[x+1][y] == '1'){
                queue.add(new Point(x+1, y));
                grid[x+1][y] = '0';
            } 
            if (y-1 >= 0 && grid[x][y-1] == '1'){
                queue.add(new Point(x, y-1));
                grid[x][y-1] = '0';
            } 
            if (y+1 < grid[0].length && grid[x][y+1] == '1') {
                queue.add(new Point(x, y+1));
                grid[x][y+1] = '0';
            }
        }
    }
    
    //DFS
    private void dfsFill(char[][] grid,int i, int j){
        if(i>=0 && j>=0 && i<grid.length && j<grid[0].length&&grid[i][j]=='1'){
        grid[i][j]='0';
        dfsFill(grid, i + 1, j);
        dfsFill(grid, i - 1, j);
        dfsFill(grid, i, j + 1);
        dfsFill(grid, i, j - 1);
    }
}
}
