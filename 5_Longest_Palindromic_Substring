class Solution {

    //Mirror, from middle to two sides
    //64ms, O(n^2)
    public String longestPalindrome(String s) {        
        if (s == null || s.isEmpty()) return null;
        
        int max = 1;
        int start = 0;
        int end = 0;
        
        for (int i = 0; i < s.length(); i++) {
            int j = 0;
            int k = 0;
            while (i - j >= 0 && i + j < s.length()) {
                if (s.charAt(i - j) == s.charAt(i + j)) j++;
                else break;
            }
            j--;
            int len1 = 2 * j + 1;
            if (len1 > max) {max = len1; start = i - j; end = i + j;};
            while (i - k >= 0 && i + k + 1 < s.length()) {
                if (s.charAt(i - k) == s.charAt(i + k + 1)) k++;
                else break;
            }
            k--;
            int len2 = 2 * k + 2;
            if (len2 > max) {max = len2; start = i - k; end = i + k + 1;};
        }
        return s.substring(start, end + 1);
    }
}
