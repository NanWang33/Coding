class Solution {

    //Mirror, from middle to two sides
    //64ms, O(n^2)
    public String longestPalindrome(String s) {        
        if (s == null || s.isEmpty()) return null;
        
        int max = 1;
        int start = 0;
        int end = 0;
        
        for (int i = 0; i < s.length(); i++) {
            int j = 0;
            int k = 0;
            while (i - j >= 0 && i + j < s.length()) {
                if (s.charAt(i - j) == s.charAt(i + j)) j++;
                else break;
            }
            j--;
            int len1 = 2 * j + 1;
            if (len1 > max) {max = len1; start = i - j; end = i + j;};
            while (i - k >= 0 && i + k + 1 < s.length()) {
                if (s.charAt(i - k) == s.charAt(i + k + 1)) k++;
                else break;
            }
            k--;
            int len2 = 2 * k + 2;
            if (len2 > max) {max = len2; start = i - k; end = i + k + 1;};
        }
        return s.substring(start, end + 1);
    }
    
    //Mirror, from middle to two sides
    //cleaning up 19ms
    public String longestPalindrome1(String s) {  
        if (s == null || s.isEmpty()) return null;
        int max = 0;
        int start = 0;
        int end = 0;
        for (int i = 0; i < s.length() - 1; i++) {
            int len1 = expandAroundCenter(s, i, i);
            int len2 = expandAroundCenter(s, i, i + 1);
            int len = Math.max(len1, len2);
            if (len > max) {
                max = len;
                start = i - (len - 1)/2;
                end = i + len/2;
            }
        }
        return s.substring(start, end + 1);
    }
    
    private int expandAroundCenter(String s, int left, int right) {
        int l = left;
        int r = right;
        while (l >= 0 && r < s.length() && s.charAt(l) == s.charAt(r)) {
            l--;
            r++;
        }
        return r - l - 1;
    }
    
    //Dynamic Programming
    //97ms O(n^2)
    public String longestPalindrome2(String s) {  
        if (s == null || s.isEmpty()) return null;
        int max = 1;
        int start = 0;
        int end = 0;
        int len = s.length();
        
        boolean [][] dp = new boolean[len][len];
        for (int k = 1; k < len; k++) {
            for (int i = 0; i + k < len; i++) {
                int j = i + k;
                if (s.charAt(i) == s.charAt(j) && (j - i <=2 || dp[i+1][j-1])) {
                    dp[i][j] = true;
                    if (j - i + 1 > max) {
                        max = j - i + 1;
                        start = i;
                        end = j;
                    }
                }
            }
        }
        return s.substring(start, end + 1);
    }
    
    //TODO Manacher's algorithm
}
