class Solution {
    public int maxSubArray(int[] nums) {
        return divide(nums, 0, nums.length - 1);
    }
    
    private int divide(int[] nums, int l, int r) {
        if (l > r) return Integer.MIN_VALUE;
        if (l == r) return nums[l];
        
        int m = l + (r - l) / 2;
        int mid = nums[m];
        int left = divide(nums, l, m - 1);
        int right = divide(nums, m + 1, r);
        
        int max = Integer.MIN_VALUE;
        int cur = 0;
        for (int i = m; i >= l; i--) {
            cur = cur + nums[i];
            max = Math.max(max, cur);
        }
        cur = max;
        for (int i = m + 1; i <= r; i++) {
            cur = cur + nums[i];
            max = Math.max(max, cur);
        }
        
        return Math.max(Math.max(left, right), max);
    }
}
