// class Trie {
//     Binary Search Tree
//     /** Initialize your data structure here. */
//     public Trie() {}
    
//     private Node root = null;
    
//     /** Inserts a word into the trie. */
//     public void insert(String word) {
//         root = insertHelper(root, word);
//     }
    
//     private Node insertHelper(Node node, String word) {
//         if (node == null) { node = new Node(word); return node;}
//         if (word.compareTo(node.val) == 0) return node;
//         if (word.compareTo(node.val) < 0) node.left = insertHelper(node.left, word);
//         else node.right = insertHelper(node.right, word);
//         return node;
//     }
    
//     /** Returns if the word is in the trie. */
//     public boolean search(String word) {
//         return searchHelper(root, word);
//     }
    
//     private boolean searchHelper(Node node, String word) {
//         if (node == null) return false;
//         if (node.val.equals(word)) return true;
//         if (word.compareTo(node.val) < 0) return searchHelper(node.left, word);
//         else return searchHelper(node.right, word);
//     }
//     /** Returns if there is any word in the trie that starts with the given prefix. */
//     public boolean startsWith(String prefix) {
//         return startsWithHelper(root, prefix);
//     }
    
//     private boolean startsWithHelper(Node node, String prefix) {
//         if (node == null) return false;
//         if (node.val.startsWith(prefix)) return true;
//         if (prefix.compareTo(node.val) < 0) return startsWithHelper(node.left, prefix);
//         else return startsWithHelper(node.right, prefix);
//     }
// }

// class Node {
//         Node left;
//         Node right;
//         String val;
        
//         Node(String s) {val = s;}
// }
// /**
//  * Your Trie object will be instantiated and called as such:
//  * Trie obj = new Trie();
//  * obj.insert(word);
//  * boolean param_2 = obj.search(word);
//  * boolean param_3 = obj.startsWith(prefix);
//  */
class TrieNode {
    private TrieNode[] links = new TrieNode[26];
    private boolean isEnd;
    
    public TrieNode(){}
    
    public boolean containsKey(char c) {
        return links[c - 'a'] != null;
    }
    
    public TrieNode get(char c) {
        return links[c - 'a'];
    }
    
    public void put(char c, TrieNode node) {
        links[c - 'a'] = node;
    }
    
    public void setEnd() {
        isEnd = true;
    }
    
    public boolean isEnd() {
        return isEnd;
    }
}

class Trie {

    private TrieNode root = new TrieNode();
    
    /** Initialize your data structure here. */
    public Trie() {}
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        TrieNode node = root;
        for (char c : word.toCharArray()) {
            if (!node.containsKey(c)) {
                node.put(c, new TrieNode());
            }
            node = node.get(c);
        }
        node.setEnd();
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        TrieNode node = root;
        for (char c : word.toCharArray()) {
            if (node == null || !node.containsKey(c)) return false;
            node = node.get(c);
        }
        return node != null && node.isEnd(); 
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        TrieNode node = root;
        for (char c : prefix.toCharArray()) {
            if (node == null || !node.containsKey(c)) return false;
            node = node.get(c);
        }
        return node != null; 
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
