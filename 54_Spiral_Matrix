class Solution {
    
    //3ms, layer by layer
    public List<Integer> spiralOrder(int[][] matrix) {
        
        List<Integer> result = new ArrayList<Integer>();
        
        if (matrix == null || matrix.length == 0 || matrix[0] == null) return result;
        
        int m = matrix.length- 1; 
        int n = matrix[0].length - 1;
        int i = 0;
        while (i <= m - i  && i <= n - i ) {
            for (int index1 = i; index1 <= n - i; index1++) {
                result.add(matrix[i][index1]);
            }
            for (int index2 = i + 1; index2 <= m - i; index2++) {
                result.add(matrix[index2][n - i]);
            }
            if (i < m - i  && i < n - i) {
                for (int index3 = n - i - 1; index3 > i; index3--) {
                    result.add(matrix[m - i][index3]);
                }
                for (int index4 = m - i; index4 > i; index4--) {
                    result.add(matrix[index4][i]);
                }
            }
            
            
            i++;
        }
        return result;
    }
    
    //Simplify, 2ms
    public List<Integer> spiralOrder1(int[][] matrix) {
        
        List<Integer> result = new ArrayList<Integer>();
        
        if (matrix == null || matrix.length == 0 || matrix[0] == null) return result;
        
        int r1 = 0;
        int r2 = matrix.length- 1; 
        int c1 = 0;
        int c2 = matrix[0].length - 1;
        
        while (r1 <= r2 && c1 <= c2 ) {
            for (int c = c1; c <= c2; c++) {
                result.add(matrix[r1][c]);
            }
            for (int r = r1 + 1; r <= r2; r++) {
                result.add(matrix[r][c2]);
            }
            if (r1 < r2  && c1 < c2) {
                for (int c = c2 - 1; c > c1; c--) {
                    result.add(matrix[r2][c]);
                }
                for (int r = r2; r > r1; r--) {
                    result.add(matrix[r][c1]);
                }
            }
            c1++;
            r1++;
            c2--;
            r2--;
        }
        return result;
    }
}
