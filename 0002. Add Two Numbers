2. Add Two Numbers

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int flag = 0;
        int digit = 0;
        ListNode dumpHead = new ListNode();
        ListNode index = dumpHead;
        while (l1 != null || l2 != null) {
            int num1 = l1 == null ? 0 : l1.val;
            int num2 = l2 == null ? 0 : l2.val;
            digit = (num1 + num2 + flag) % 10;
            index.next = new ListNode(digit);
            index = index.next;
            flag = (num1 + num2 + flag) / 10;
            
            if (l1 != null) l1 = l1.next;
            if (l2 != null) l2 = l2.next;
        }
        
        if (flag > 0) index.next = new ListNode(flag);
        
        return dumpHead.next;
    }
}

445. Add Two Numbers II

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // Use stack to store the numbers reversely
        Stack<Integer> s1 = new Stack<Integer>();
        Stack<Integer> s2 = new Stack<Integer>();
        while(l1 != null) {
            s1.push(l1.val);
            l1 = l1.next;
        }
        while(l2 != null) {
            s2.push(l2.val);
            l2 = l2.next;
        }
        
        int flag = 0;
        
        Stack<Integer> s3 = new Stack<Integer>();
        while(!s1.empty() || !s2.empty()){
            int x = s1.empty() ? 0 : s1.pop();
            int y = s2.empty() ? 0 : s2.pop();
            int res = (x + y + flag) % 10;
            flag = (x + y + flag) / 10;
            s3.push(res);
        }
        if (flag == 1) s3.push(1);
        
        ListNode index = new ListNode(0);
        ListNode result = index;
        while (!s3.empty()) {
            index.next = new ListNode(s3.pop());
            index = index.next;
        }
        return result.next;
    }
}
