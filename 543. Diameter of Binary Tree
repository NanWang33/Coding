/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
//     public int diameterOfBinaryTree(TreeNode root) {
//         if (root == null) return 0;
//         return Math.max(Math.max(diameterOfBinaryTree(root.left), diameterOfBinaryTree(root.right)), depth(root.left) + depth(root.right));
//     }
    
//     private int depth(TreeNode root) {
//         if (root == null) return 0;
//         return 1 + Math.max(depth(root.left), depth(root.right));
//     }
    
        int max = 0;
    
    public int diameterOfBinaryTree(TreeNode root) {
        maxDepth(root);
        return max;
    }
    
    private int maxDepth(TreeNode root) {
        if (root == null) return 0;
        
        int left = maxDepth(root.left);
        int right = maxDepth(root.right);
        
        max = Math.max(max, left + right);
        
        return Math.max(left, right) + 1;
    }
}
