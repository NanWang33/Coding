class Solution {
    public int minPathSum(int[][] grid) {
           //O(n*n) space
//         if (grid == null || grid.length == 0) return 0;
//         int m = grid.length;
//         int n = grid[0].length;
//         int[][] dp = new int[m][n];
        
//         dp[0][0] = grid[0][0];
//         for (int i = 1; i < m; i++) {
//             dp[i][0] = dp[i-1][0] + grid[i][0];
//         }
//         for (int i = 1; i < n; i++) {
//             dp[0][i] = dp[0][i-1] +grid[0][i];
//         }
        
//         for (int i = 1; i < m; i++) {
//             for (int j = 1; j < n; j++) {
//                 dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i][j];
//             }
//         }
//         return dp[m-1][n-1];
        
        
        
            //O(n*n) space
//         if (grid == null || grid.length == 0) return 0;
//         int m = grid.length;
//         int n = grid[0].length;
//         int[][] dp = new int[m + 1][n + 1];
        
//         for (int i = 0; i <= m; i++) {
//             dp[i][0] = Integer.MAX_VALUE;
//         }
//         for (int i = 0; i <= n; i++) {
//             dp[0][i] = Integer.MAX_VALUE;
//         }
        
//         for (int i = 1; i <= m; i++) {
//             for (int j = 1; j <= n; j++) {
//                 if (i == 1 && j == 1) dp[i][j] = grid[0][0];
//                 else dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i-1][j-1];
//             }
//         }
//         return dp[m][n];
//     }
        
        
        //O(n) space
        if (grid == null || grid.length == 0) return 0;
        int m = grid.length;
        int n = grid[0].length;
        int[] dpRow = new int[n];
        
        for (int i = 0; i < n; i++) {
            dpRow[i] = Integer.MAX_VALUE;
        }
        
        for (int i = 1; i <= m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 1 && j == 0) dpRow[0] = grid[0][0];
                else if (j == 0) dpRow[0] = grid[i-1][0] + dpRow[0];
                else dpRow[j] = Math.min(dpRow[j-1], dpRow[j]) + grid[i-1][j];
            }
        }
        return dpRow[n-1];
    }        
        
}
