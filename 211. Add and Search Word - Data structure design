class TrieNode {
    private TrieNode[] links = new TrieNode[26];
    private boolean isEnd;
    
    public TrieNode(){}
    
    public boolean containsKey(char c) {
        return links[c - 'a'] != null;
    }
    
    public TrieNode get(char c) {
        return links[c - 'a'];
    }
    
    public void put(char c, TrieNode node) {
        links[c - 'a'] = node;
    }
    
    public void setEnd() {
        isEnd = true;
    }
    
    public boolean isEnd() {
        return isEnd;
    }
}

class WordDictionary {

    private TrieNode root = new TrieNode();
    
    /** Initialize your data structure here. */
    public WordDictionary() {
        
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        TrieNode node = root;
        for (char c : word.toCharArray()) {
            TrieNode next = node.get(c);
            if (next == null) next = new TrieNode();
            node.put(c, next);
            node = next;
        }
        node.setEnd();
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        if (word == null || word.length() == 0) return true;
        return searchHelper(word, root);
    }
    
    private boolean searchHelper(String word, TrieNode node) {
        if (node == null) return false;
        if (word.length() == 0) return node.isEnd();

        char c = word.charAt(0);
        if (c != '.') {
            if (node.containsKey(c)) return searchHelper(word.substring(1), node.get(c));
            return false;
        } else {
            for (int i = 0; i < 26; i++) {
                 if (searchHelper(word.substring(1), node.get((char)('a' + i)))) return true;   
            }
            return false;
        }
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */
