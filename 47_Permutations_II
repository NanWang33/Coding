class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> one = new ArrayList<Integer>();
        int[] visited = new int[nums.length];
        Arrays.sort(nums);
        dfs(nums, one, res, 0, visited);
        return res;
    }
    
    private void dfs(int[] nums, List<Integer> one, List<List<Integer>> res, int depth, int[] visited) {
        if (depth == nums.length) {
            res.add(new ArrayList<Integer>(one));
            return;
        } 
        for (int i = 0; i < nums.length; i++) {
            if (i > 0 && nums[i - 1] == nums[i] && visited[i-1] == 0) continue;
            if (visited[i] == 0) {
                one.add(nums[i]);
                visited[i] = 1;
                dfs(nums, one, res, depth + 1, visited);
                visited[i] = 0;
                one.remove(one.size() - 1);
            }
        }
    }
    
    //Use count
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> cur = new ArrayList<Integer>();
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        
        for (int n : nums) {
            Integer val = map.get(n);
            if (val == null) val = 0;
            map.put(n, val+1);
        }
        
        int[] newNums = new int[map.size()];
        int[] count = new int[map.size()];
        int index = 0;
        for (Map.Entry<Integer, Integer> en : map.entrySet()) {
            newNums[index] = en.getKey();
            count[index] = en.getValue();
            index++;
        }
        
        dfs(newNums, count, 0, nums.length, cur, res);
        return res;
    }
    
    private void dfs(int[] nums, int[] count, int depth, int n, List<Integer> cur, List<List<Integer>> res) {
        //here, not depth == nums.length
        if (depth == n) {
            res.add(new ArrayList<Integer>(cur));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (count[i] == 0) continue;
            count[i]--;
            cur.add(nums[i]);
            dfs(nums, count, depth+1, n, cur, res);
            count[i]++;
            cur.remove(cur.size()-1);
        }
    }
}
