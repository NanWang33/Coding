class Solution {

    //DFS 3ms
    public List<String> letterCombinations(String digits) {
        String[] dict = {" ","", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        List<String> res = new ArrayList<String>();
        StringBuilder sb = new StringBuilder();
        
        if (digits == null || digits.isEmpty()) return res;
        
        dfs(dict, digits, res, sb, 0);
        
        return res;
    }
    
    private void dfs(String[] dict, String digits, List<String> res, StringBuilder sb, int deep) {
        if (deep == digits.length()) {
            res.add(sb.toString());
            return;
        } else {
            String dictContent = dict[Integer.parseInt("" + digits.charAt(deep))];
            for (int i = 0; i < dictContent.length(); i++) {
                sb.append(dictContent.charAt(i));
                dfs(dict, digits, res, sb, deep + 1);
                sb.deleteCharAt(sb.length() - 1);
            }
        }
    }
    
    
    public List<String> letterCombinations(String digits) {
        
        Map<Character, char[]> map = new HashMap<Character, char[]>();
        map.put('2', new char[]{'a', 'b', 'c'});
        map.put('3', new char[]{'d', 'e', 'f'});
        map.put('4', new char[]{'g', 'h', 'i'});
        map.put('5', new char[]{'j', 'k', 'l'});
        map.put('6', new char[]{'m', 'n', 'o'});
        map.put('7', new char[]{'p', 'q', 'r', 's'});
        map.put('8', new char[]{'t', 'u', 'v'});
        map.put('9', new char[]{'w', 'x', 'y', 'z'});
        List<String> res = new ArrayList<String>();
        
        if (digits == null || digits.length()==0) return res;
        
        StringBuilder sb = new StringBuilder();
        char[] chars = digits.toCharArray();
        dfs(chars, 0, sb, res, map);
        return res;
    }
    
    private void dfs(char[] chars, int depth, StringBuilder sb, List<String> res, Map<Character, char[]> map) {
        if (depth == chars.length) {
            res.add(sb.toString());
            return;
        }
        
        for (char c : map.get(chars[depth])) {
            dfs(chars, depth+1, sb.append(c), res, map);
            sb.deleteCharAt(sb.length() - 1) ;
        }
    }
}
