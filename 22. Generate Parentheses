class Solution {

    //2ms, DFS
    public List<String> generateParenthesis(int n) {
        List<String> ret = new ArrayList<String>();
        StringBuilder str = new StringBuilder();
        dfs(ret, str, 0, 0, n);
        return ret;
    }
    public void dfs(List<String> ret, StringBuilder str, int left, int right, int n){
        if(left == n && right == n){
            ret.add(str.toString());
            return;
        }
        if(left < n){
            str.append('(');
            dfs(ret, str, left + 1, right, n);
            str.deleteCharAt(str.length() - 1);
        }
        if(right < left){
            str.append(')');
            dfs(ret, str, left, right + 1, n);
            str.deleteCharAt(str.length() - 1);
        }
    }
}
