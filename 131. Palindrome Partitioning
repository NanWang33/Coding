class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<List<String>>();
        dfs(s, res, new ArrayList<String>(), 0);
        return res;
    }
    
    private void dfs(String s, List<List<String>> res, ArrayList<String> cur, int index) {
        if (index == s.length()) {
            res.add(new ArrayList<String>(cur));
            cur = new ArrayList<String>();
            return;
        }
        String news = "";
        int newIndex = index+1;
        while(newIndex <= s.length()) {
            news = s.substring(index, newIndex);
            if (isPalindrome(news)) {
                cur.add(news);
                dfs(s, res, cur, newIndex);
                cur.remove(cur.size()-1);
            }
            newIndex++;
        }
    }
    
    private boolean isPalindrome(String s) {
        if (s.length() <= 1) return true;
        
        for (int i = 0; i < s.length() / 2; i++) {
            if (s.charAt(i) != s.charAt(s.length()-1-i)) return false;
        }
        return true;
    }
}
