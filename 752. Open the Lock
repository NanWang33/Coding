class Solution {
    public int openLock(String[] deadends, String target) {
        Set<String> dead = new HashSet<String>();
        Set<String> visited = new HashSet<String>();

        for (String s : deadends) {
            if (s.equals("0000")) return -1;
            dead.add(s);
        }
        Queue<String> queue = new LinkedList<String>();
        queue.offer("0000");
        visited.add("0000");
        int depth = 0;
        while(!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String cur = queue.poll();
                if (cur.equals(target)) return depth;
                for(String next : nextStep(cur)) {
                    if (dead.contains(next) || visited.contains(next)) continue;
                    queue.offer(next);
                    visited.add(next);
                }
            }
            
            depth++;
        }
        return -1;
    }
    
    private List<String> nextStep(String s) {
        StringBuilder sb = new StringBuilder(s);
        List<String> res = new ArrayList<String>();
        for (int i = 0; i < 4; i++) {
            char c = s.charAt(i);
            if (c > '0' && c < '9') {
                sb.setCharAt(i, (char)(c+1));
                res.add(sb.toString());
                sb.setCharAt(i, (char)(c-1));
                res.add(sb.toString());
            } else if (c == '0') {
                sb.setCharAt(i, (char)(c+1));
                res.add(sb.toString());
                sb.setCharAt(i, '9');
                res.add(sb.toString());
            } else {
                sb.setCharAt(i, '0');
                res.add(sb.toString());
                sb.setCharAt(i, (char)(c-1));
                res.add(sb.toString());
            }
            sb.setCharAt(i, c);
        }
        return res;
    }
}
