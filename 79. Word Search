class Solution {
        public boolean exist(char[][] board, String word) {
            if (word == null || word.length() == 0) return false;
            for (int i = 0; i < board.length; i++) {
                for (int j = 0; j < board[0].length; j++) {
                    if(dfs(board, word, 0, i, j)) return true;
                }
            }
            return false;
        }
        
        private boolean dfs(char[][] board, String word, int depth, int x, int y) {
            if (depth == word.length()) {
                return true;
            }
            
            if (x < 0 || y < 0 || x >= board.length || y >= board[0].length) return false;
            char cur = board[x][y];
            if (cur != word.charAt(depth)) return false;
            
            board[x][y] = '*';
            boolean res = (dfs(board, word, depth+1, x-1, y) ||
               dfs(board, word, depth+1, x+1, y) ||
               dfs(board, word, depth+1, x, y-1) ||
               dfs(board, word, depth+1, x, y+1));
            board[x][y] = cur;
            return res;
        }
}
