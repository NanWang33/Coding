class Solution {

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> cur = new ArrayList<Integer>();
        boolean[] used = new boolean[nums.length];
        dfs(nums, 0, cur, res, used);
        
        return res;
    }
    
    private void dfs(int[] nums, int depth, List<Integer> cur, List<List<Integer>> res, boolean[] used) {
        if (depth == nums.length) {
            res.add(new ArrayList<Integer>(cur));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (used[i]) continue;
            cur.add(nums[i]);
            used[i] = true;
            dfs(nums, depth+1, cur, res, used);
            cur.remove(cur.size()-1);
            used[i] = false;
        }
    }
}
