class Solution {

    //14ms, dfs
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> one = new ArrayList<Integer>();
        dfs(nums, one, res, 0);
        return res;
    }
    
    private void dfs(int[] nums, List<Integer> one, List<List<Integer>> res, int depth) {
        if (depth == nums.length) {
            res.add(new ArrayList<Integer>(one));
            return;
        } 
        for (int num : nums) {
            boolean found = false;
            for (int n : one) {
                if (n == num) found = true;
            }
            if (found) continue;
            
            one.add(num);
            dfs(nums, one, res, depth + 1);
            one.remove(one.size() - 1);
        }
    }
    
    //6ms, simplify with the help of int[] visited
    public List<List<Integer>> permute1(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> one = new ArrayList<Integer>();
        int[] visited = new int[nums.length];
        dfs1(nums, one, res, 0, visited);
        return res;
    }
    
    private void dfs1(int[] nums, List<Integer> one, List<List<Integer>> res, int depth, int[] visited) {
        if (depth == nums.length) {
            res.add(new ArrayList<Integer>(one));
            return;
        } 
        for (int i = 0; i < nums.length; i++) {
            if (visited[i] == 0) {
                one.add(nums[i]);
                visited[i] = 1;
                dfs1(nums, one, res, depth + 1, visited);
                visited[i] = 0;
                one.remove(one.size() - 1);
            }
        }
    }
}
