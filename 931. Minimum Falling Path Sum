class Solution {
    public int minFallingPathSum(int[][] A) {
        if (A == null || A.length == 0) return 0;
        int m = A.length;
        int n = A[0].length;
        int[] res = new int[n + 2];
        int[] preRes = new int[n + 2];
        
        preRes[0] = Integer.MAX_VALUE;
        preRes[n+1] = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            preRes[i + 1] = A[0][i];
            res[i + 1] = A[0][i];
        }
        
        for (int j = 1; j < m; j++) {
            for (int i = 1; i <= n; i++) {
                res[i] = Math.min(Math.min(preRes[i-1], preRes[i]), preRes[i+1]) + A[j][i-1];
            }
            for (int i = 1; i <= n; i++) {
                preRes[i] = res[i];
            }
        }
        
        int min = Integer.MAX_VALUE;
        for(int i = 1; i <=n; i++) {
            if (res[i] < min) min = res[i];
        }
        return min;
    }
}
