class Solution {
//     public int[] twoSum(int[] numbers, int target) {
//         for (int i = 0; i < numbers.length; i++) {
//             if (numbers[i] > target) break;
//             int j = binarySearch(numbers, i + 1, target - numbers[i]);
//             if (j < numbers.length && numbers[j] == target - numbers[i]) return new int[]{i+1, j+1};
//         }
//         return null;
//     }
    
//     private int binarySearch(int[] numbers, int left, int target) {
//         int l = left;
//         int r = numbers.length - 1;
//         while (l <= r) {
//             int m = l + (r-l)/2;
//             if (numbers[m] >= target) r = m - 1;
//             else l = m + 1;
//         }
//         return l;
//     }
    
    public int[] twoSum(int[] numbers, int target) {
        int l = 0;
        int r = numbers.length-1;
        while (l < r) {
            int left = numbers[l];
            int right = numbers[r];
            if (left + right > target) r--;
            else if (left + right < target) l++;
            else return new int[]{l+1, r+1};
        }
        return null;
    }
}
