class Solution {
    public boolean canPartitionKSubsets(int[] nums, int k) {
        int sum = 0;
        for (int n : nums) {
            sum += n;
        }
        if (k <= 0 || sum % k != 0) return false;
        sum = sum / k;
        
        int[] visited = new int[nums.length];
        return dfs(nums, 0, k, 0, 0, visited, sum);
    }
    
    private boolean dfs(int[] nums, int index, int k, int cursum, int curnum, int[] visited, int target) {
        if (k == 1) return true;
        if (cursum == target && curnum > 0) return dfs(nums, 0, k-1, 0, 0, visited, target);
        for (int i = index; i < nums.length; i++) {
            if (visited[i] == 0) {
                visited[i] = 1;
                if (dfs(nums, i+1, k, cursum + nums[i], curnum+1, visited, target)) return true;
                visited[i] = 0;
            }
            
        }
        return false;
    }
}
