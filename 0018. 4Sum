18. 4Sum

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        // !!!! always ask range of input num
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (nums == null || nums.length < 4) return res;
        
        Arrays.sort(nums);
        
        for (int i = 0; i < nums.length - 3; i++) {
            if (i > 0 && nums[i] == nums[i-1]) continue;
            long first = nums[i];
            for (int j = i+1; j < nums.length - 2; j++) {
                if (j > i+1 && nums[j] == nums[j-1]) continue;
                long second = nums[j];
                List<List<Integer>> lastTwo = twoSum(nums, j+1, (long)target - first - second);
                if (!lastTwo.isEmpty()) {
                    for (List<Integer> last : lastTwo) {
                        List<Integer> one = new ArrayList<Integer>();
                        one.add((int)first);
                        one.add((int)second);
                        one.add(last.get(0));
                        one.add(last.get(1));
                        res.add(one);
                    }
                }
            }
        }
        return res;
    }
    
    public List<List<Integer>> twoSum(int[] nums, int start, long target) {
        // Two pointers, i -> first index, j -> second index
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        
        int i = start;
        int j = nums.length - 1;
        while (i < j) {
            while (i > start && i < j && nums[i] == nums[i-1]) i++;
            while (j+1 < nums.length && i < j && nums[j] == nums[j+1]) j--;
            if (i >= j) break;
            if (nums[i] + nums[j] < target) i++;
            else if ((long)nums[i] + (long)nums[j] > target) j--;
            else {
                List<Integer> one = new ArrayList<Integer>();
                one.add(nums[i]);
                one.add(nums[j]);
                res.add(one);
                i++;
            }
        }
        
        return res;
    }
}

454. 4Sum II
class Solution {
    public int fourSumCount(int[] nums1, int[] nums2, int[] nums3, int[] nums4) {
        // O(n^3) pick first three numbers, then look for the fourth from hashmap
        // construct map : val -> count for nums4
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int n : nums4) map.put(n, map.getOrDefault(n, 0) + 1);
        
        int res = 0;
        for (int i = 0; i < nums1.length; i++) {
            for (int j = 0; j < nums2.length; j++) {
                for (int k = 0; k < nums3.length; k++) {
                    int target = -nums1[i] - nums2[j] - nums3[k];
                    Integer count = map.get(target);
                    if (count != null) res += count;
                }
            }
        }
        return res;
    }
    
    public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {
        int cnt = 0;
        Map<Integer, Integer> m = new HashMap<>();
        for (int a : A) {
            for (int b : B) {
                m.put(a + b, m.getOrDefault(a + b, 0) + 1);
            }
        }
        for (int c : C) {
            for (int d : D) {
                cnt += m.getOrDefault(-(c + d), 0);
            }
        }
        return cnt;
    }
}
