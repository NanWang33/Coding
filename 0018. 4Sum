18. 4Sum

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        // !!!! always ask range of input num
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (nums == null || nums.length < 4) return res;
        
        Arrays.sort(nums);
        
        for (int i = 0; i < nums.length - 3; i++) {
            if (i > 0 && nums[i] == nums[i-1]) continue;
            long first = nums[i];
            for (int j = i+1; j < nums.length - 2; j++) {
                if (j > i+1 && nums[j] == nums[j-1]) continue;
                long second = nums[j];
                List<List<Integer>> lastTwo = twoSum(nums, j+1, (long)target - first - second);
                if (!lastTwo.isEmpty()) {
                    for (List<Integer> last : lastTwo) {
                        List<Integer> one = new ArrayList<Integer>();
                        one.add((int)first);
                        one.add((int)second);
                        one.add(last.get(0));
                        one.add(last.get(1));
                        res.add(one);
                    }
                }
            }
        }
        return res;
    }
    
    public List<List<Integer>> twoSum(int[] nums, int start, long target) {
        // Two pointers, i -> first index, j -> second index
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        
        int i = start;
        int j = nums.length - 1;
        while (i < j) {
            while (i > start && i < j && nums[i] == nums[i-1]) i++;
            while (j+1 < nums.length && i < j && nums[j] == nums[j+1]) j--;
            if (i >= j) break;
            if (nums[i] + nums[j] < target) i++;
            else if ((long)nums[i] + (long)nums[j] > target) j--;
            else {
                List<Integer> one = new ArrayList<Integer>();
                one.add(nums[i]);
                one.add(nums[j]);
                res.add(one);
                i++;
            }
        }
        
        return res;
    }
}

454. 4Sum II
