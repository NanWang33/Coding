class Solution {

    //59ms
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        
        if (nums == null || nums.length < 4)
	    return result;
        
        Arrays.sort(nums);
        
        for (int i = 0; i < nums.length - 3; i++) {
            if (i == 0 || nums[i] > nums[i - 1]) {
                int newTarget = target - nums[i];
                List<List<Integer>> thisResult = threeSum(nums, newTarget, i + 1);
                for (List<Integer> one : thisResult) {
                    one.add(nums[i]);
                    result.add(one);
                }
            }
        }
        return result;
    }
    
    private List<List<Integer>> threeSum(int[] nums, int target, int beginWith) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if (nums == null || nums.length < 3) return result;
 
	for (int i = beginWith; i < nums.length - 2; i++) {
        //avoid duplicate solutions    
	    if (i == beginWith || nums[i] > nums[i - 1]) {
  		int negate = target - nums[i];
 		int start = i + 1;
		int end = nums.length - 1;
 
		while (start < end) {
		    if (nums[start] + nums[end] == negate) {
		    	ArrayList<Integer> temp = new ArrayList<Integer>();
		    	temp.add(nums[i]);
		    	temp.add(nums[start]);
		    	temp.add(nums[end]);
 
 		    	result.add(temp);
		    	start++;
		    	end--;
		   	//avoid duplicate solutions
		    	while (start < end && nums[end] == nums[end + 1]) end--;
 		    	while (start < end && nums[start] == nums[start - 1]) start++;

		    } else if (nums[start] + nums[end] < negate) {
			start++;
		    } else {
		        end--;
		    }
		}
	    }
	}
        return result;
    }
}
