class Solution {
    //O(n) dp
    public int maxProfit(int[] prices) {
        int hold1 = Integer.MIN_VALUE, hold2 = Integer.MIN_VALUE;
        int release1 = 0, release2 = 0;
        for(int i:prices){                              // Assume we only have 0 money at first
            release2 = Math.max(release2, hold2+i);     // The maximum if we've just sold 2nd stock so far.
            hold2    = Math.max(hold2,    release1-i);  // The maximum if we've just buy  2nd stock so far.
            release1 = Math.max(release1, hold1+i);     // The maximum if we've just sold 1nd stock so far.
            hold1    = Math.max(hold1,    -i);          // The maximum if we've just buy  1st stock so far. 
        }
        return release2;
    }
    
    //O(n^2)
    public int maxProfit(int[] prices) {
        if(prices == null || prices.length == 0) return 0;
        
        int max = 0;
        for (int i = 1; i < prices.length; i++) {
            max = Math.max(max, max(prices, 0, i-1) + max(prices, i, prices.length-1));
        }
        
        return Math.max(max, max(prices, 0, prices.length -1));
    }
    
    private int max(int[] prices, int s, int e) {
        int min = Integer.MAX_VALUE;
        int res = 0;
        for(int i = s; i <= e; i++) {
            min = Math.min(prices[i], min);
            res = Math.max(res, prices[i] - min);
        }
        return res;
    }
}
