class Solution {
    
    //Out of memory
//     public int maximumGap(int[] nums) {
//         if(nums == null || nums.length < 2) return 0;
        
//         int max = 0;
//         for (int num : nums) {
//             if (num > max) max = num;
//         }
        
//         boolean[] bucket = new boolean[max + 1];
//         for (int num : nums) {
//             bucket[num] = true;
//         }
        
//         int res = 0;
//         int i = 0;
//         while (i < bucket.length) {
//             if (bucket[i]) {
//                 int index = i + 1;
//                 while (index < bucket.length && bucket[index] == false){
//                     index++;
//                 }
//                 if (index == bucket.length) break;
//                 res = Math.max(res, index - i);
//                 i = index;
//             } else {
//                 i++;
//             }
//         }
//         return res;
//     }
    
    public int maximumGap(int[] nums) {
        if (nums == null || nums.length < 2)
        return 0;
        // get the max and min value of the array
        int min = nums[0];
        int max = nums[0];
        for (int i:nums) {
            min = Math.min(min, i);
            max = Math.max(max, i);
        }
        // the minimum possibale gap, ceiling of the integer division
        int gap = (max - min)%(nums.length - 1) == 0 ? (max - min)/(nums.length - 1) : (max - min)/(nums.length - 1) + 1;
        int[] bucketsMIN = new int[nums.length - 1]; // store the min value in that bucket
        int[] bucketsMAX = new int[nums.length - 1]; // store the max value in that bucket
        Arrays.fill(bucketsMIN, Integer.MAX_VALUE);
        Arrays.fill(bucketsMAX, Integer.MIN_VALUE);
        // put numbers into buckets
        for (int i:nums) {
            if (i == min || i == max)
                continue;
            int idx = (i - min) / gap; // index of the right position in the buckets
            bucketsMIN[idx] = Math.min(i, bucketsMIN[idx]);
            bucketsMAX[idx] = Math.max(i, bucketsMAX[idx]);
        }
        // scan the buckets for the max gap
        int maxGap = Integer.MIN_VALUE;
        int previous = min;
        for (int i = 0; i < nums.length - 1; i++) {
            if (bucketsMIN[i] == Integer.MAX_VALUE && bucketsMAX[i] == Integer.MIN_VALUE)
                // empty bucket
                continue;
            // min value minus the previous value is the current gap
            maxGap = Math.max(maxGap, bucketsMIN[i] - previous);
            // update previous bucket value
            previous = bucketsMAX[i];
        }
        maxGap = Math.max(maxGap, max - previous); // updata the final max value gap
        return maxGap;
    }
}
