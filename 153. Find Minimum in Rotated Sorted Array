class Solution {
    public int findMin(int[] nums) {
//         int start = 0;
//         int end = nums.length - 1;
//         //Consider corner cases to avoid OutOfBound Exception on mid-/+1
//         if (nums.length == 1) return nums[0];
//         if (nums[end] > nums[start]) return nums[start];
        
//         while (start <= end) {
//             int mid = start + (end - start) / 2;
//             if (nums[mid]  > nums[mid + 1]) return nums[mid + 1];
//             if (nums[mid - 1]  > nums[mid]) return nums[mid];
            
//             //if left part is sorted, look into right
//             if(nums[start] <= nums[mid]){
//                 start = mid + 1;
//             }else {
//                 end = mid -1;
//             }
//         }
//         return -1;
        int l = 0;
        int r = nums.length -1;
        while (l < r) {
            int m = l + (r - l)/2;
            if (nums[m] < nums[r]) r = m;
            else l = m + 1;
        }
        return nums[l];
    }
}
