/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {

    //18ms, Divide and Conquer, O(n*lnk)
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0) return null;
        return mergeK(lists, 0, lists.length - 1);
    }
    
    private ListNode mergeK(ListNode[] lists, int s, int e) {
        if (s == e) return lists[s];
        int mid = (s + e) / 2;
        ListNode n1 = mergeK(lists, s, mid);
        ListNode n2 = mergeK(lists, mid + 1, e);
        return merge2(n1, n2);
    }
    
    private ListNode merge2(ListNode n1, ListNode n2) {
        ListNode res = new ListNode(0);
        ListNode index = res;
        while(n1 != null || n2 != null) {
            Integer v1 = n1 == null ? null : n1.val;
            Integer v2 = n2 == null ? null : n2.val;
            if (v1 == null || (v2 != null && v1 > v2)) {
                index.next = n2;
                n2 = n2.next;
                index = index.next;
            } else if (v2 == null || (v1 != null && v1 <= v2)) {
                index.next = n1;
                n1 = n1.next;
                index = index.next;
            }
        }
        return res.next;
    }

//    Find smallest in each column, recursive
//    public ListNode mergeKLists(ListNode[] lists) {
//         ListNode min = new ListNode(Integer.MAX_VALUE);
//         for (ListNode one : lists) {
//             if (one == null) continue;
//             if (one.val < min.val) {
//                 min = one;
//             }
//         }
        
//         //All null
//         if (min.val == Integer.MAX_VALUE) return null;
        
//         ListNode[] newLists = new ListNode[lists.length];
//         int index = 0;
//         for (ListNode one : lists) {
//             if (one == min) newLists[index] = one.next;
//             else newLists[index] = one;
//             index++;
//         }
//         min.next = mergeKLists(newLists);
//         return min;
//     }
    

    
//Have to make ListNode comparable if want to use PriorityQueue
//     public class ListNode implements Comparable{
//         int val;
//         ListNode next;
//         ListNode(int x) { val = x; }
        
//         @Override
//         public int compareTo(Object ob) {
//             ListNode o = (ListNode) ob;
//             return val - o.val;
//         }
//     }
    
//     public ListNode mergeKLists(ListNode[] lists) {
//         ListNode res = new ListNode(0);
//         ListNode index = res;
//         PriorityQueue<ListNode> q = new PriorityQueue<ListNode>(); 
        
//         for (ListNode one : lists) {
//             if (one != null) q.add(one);
//         }
        
//         while (q.size() > 0) {
//             ListNode node = q.poll();
//             index.next = new ListNode(node.val);
//             node = node.next;
//             if (node != null) {
//                 q.add(node);
//             }
//             index = index.next;
//         }
//         return res.next;
//     }
}
}
