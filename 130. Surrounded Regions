class Solution {
    //Union-find, quick-find, slow
//     public void solve(char[][] board) {
//         if (board == null || board.length == 0 || board[0] == null) return;
//         int m = board.length;
//         int n = board[0].length;
//         int[] all = new int[m * n + 1];
//         for (int i = 0; i < m; i++) {
//             for (int j = 0; j < n; j++) {
//                 all[i * n + j] = i * n + j;
//             }
//         }
        
//         all[m*n] = m * n;
        
//         //Union all 'O's
//         for (int i = 0; i < m; i++) {
//             for (int j = 0; j < n; j++) {
//                 if (board[i][j] == 'O') {
//                     if (i == 0 || i == m-1 || j == 0 || j == n-1) 
//                         union(all, i * n + j, m * n);
//                     if (i-1 >= 0 && board[i-1][j] == 'O') 
//                         union(all, i * n + j, (i-1) * n + j);
//                     if (j-1 >= 0 && board[i][j-1] == 'O') 
//                         union(all, i * n + j, i * n + j - 1);
//                 }
//             }
//         }
        
//         for (int i = 0; i < m; i++) {
//             for (int j = 0; j < n; j++) {
//                 if (board[i][j] == 'O') {
//                     if (!find(all, i * n + j, m * n))
//                         board[i][j] = 'X';
//                 }
//             }
//         }
//     }
    
//     private void union(int[] all, int r, int l) {
//         if (all[r] == all[l]) return;
//         int target = all[r];
//         int previous = all[l];
//         for (int i = 0; i < all.length; i++) {
//             if (all[i] == previous) all[i] = target;
//         }
//     }
    
//      private boolean find(int[] all, int r, int l) {
//         return all[r] == all[l];
//      }
        
    //Union-find, quick-union, slow
//     public void solve(char[][] board) {
//         if (board == null || board.length == 0 || board[0] == null) return;
//         int m = board.length;
//         int n = board[0].length;
//         int[] all = new int[m * n + 1];
//         for (int i = 0; i < m; i++) {
//             for (int j = 0; j < n; j++) {
//                 all[i * n + j] = i * n + j;
//             }
//         }
        
//         all[m*n] = m * n;
        
//         //Union all 'O's
//         for (int i = 0; i < m; i++) {
//             for (int j = 0; j < n; j++) {
//                 if (board[i][j] == 'O') {
//                     if (i == 0 || i == m-1 || j == 0 || j == n-1) 
//                         union(all, i * n + j, m * n);
//                     if (i-1 >= 0 && board[i-1][j] == 'O') 
//                         union(all, i * n + j, (i-1) * n + j);
//                     if (j-1 >= 0 && board[i][j-1] == 'O') 
//                         union(all, i * n + j, i * n + j - 1);
//                 }
//             }
//         }
        
//         int target = all[m*n];
//         for (int i = 0; i < m; i++) {
//             for (int j = 0; j < n; j++) {
//                 if (board[i][j] == 'O') {
//                     if (findSet(all, i * n + j) != target)
//                         board[i][j] = 'X';
//                 }
//             }
//         }
//     }
    
//     private void union(int[] unionSet, int x,int y){
//         int rootX = findSet(unionSet, x);
//         int rootY = findSet(unionSet, y);
//         unionSet[rootX] = rootY;
//     }
    
//     private int findSet(int[] unionSet, int x){
//         if(unionSet[x] == x) return x;
//         unionSet[x] = findSet(unionSet, unionSet[x]);
//         return unionSet[x];
//     }
    
    public void solve(char[][] board) {
        if (board.length == 0 || board[0].length == 0) return;
        if (board.length < 3 || board[0].length < 3) return;
        int m = board.length;
        int n = board[0].length;
        for (int i = 0; i < m; i++) {
            if (board[i][0] == 'O') helper(board, i, 0);
            if (board[i][n - 1] == 'O') helper(board, i, n - 1);
        }
        for (int j = 1; j < n - 1; j++) {
            if (board[0][j] == 'O') helper(board, 0, j);
            if (board[m - 1][j] == 'O') helper(board, m - 1, j);
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'O') board[i][j] = 'X';
                if (board[i][j] == '*') board[i][j] = 'O';
            }
        }
    }
    
    private void helper(char[][] board, int r, int c) {
        if (r < 0 || c < 0 || r > board.length - 1 || c > board[0].length - 1 || board[r][c] != 'O') return;
        board[r][c] = '*';
        helper(board, r + 1, c);
        helper(board, r - 1, c);
        helper(board, r, c + 1);
        helper(board, r, c - 1);
    }
}
