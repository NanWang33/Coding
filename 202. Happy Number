class Solution {
//     private HashSet<Integer> set = new HashSet<Integer>();
    
//     public boolean isHappy(int n) {
//         int newn = 0;
//         while (n > 0) {
//             newn += (n % 10) *(n % 10);
//             n = n / 10;
//         }
        
//         if (newn == 1) return true;
//         if (set.contains(newn)) return false;
//         set.add(newn);
//         return isHappy(newn);
//     }
    
    private int digitSquareSum(int n) {
        int sum = 0, tmp;
        while (n > 0) {
            tmp = n % 10;
            sum += tmp * tmp;
            n /= 10;
        }
        return sum;
    }

    public boolean isHappy(int n) {
        int slow, fast;
        slow = fast = n;
        do {
            slow = digitSquareSum(slow);
            fast = digitSquareSum(fast);
            fast = digitSquareSum(fast);
        } while(slow != fast);
        if (slow == 1) return true;
        else return false;
    }
}
