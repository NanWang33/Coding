class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        if (!wordList.contains(endWord)) return 0;
        HashSet<String> set = new HashSet<String>(wordList);
        
        int depth = 1;
        int len = beginWord.length();
        Queue<String> queue = new LinkedList<String>();
        queue.add(beginWord);
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int count = 0; count < size; count++ ) {
                String cur = queue.poll();
                if (cur.equals(endWord)) return depth;
                for (int i = 0; i <len; i++ ) {
                    for (int j = 0; j < 26; j++) {
                        char[] chars = cur.toCharArray();
                        chars[i] = (char)('a' + j);
                        String newS = new String(chars);
                        if (!cur.equals(newS) && set.contains(newS)) {  
                            queue.add(newS);
                            set.remove(newS);
                        }
                    }
                }
            }
            
            depth++;
        }
        return 0;
    }
}
