class Solution {
//     public String largestNumber(int[] nums) {
//         Integer[] numbers = new Integer[nums.length];
//         for (int i = 0; i < nums.length; i++) {
//             numbers[i] = nums[i];
//         }
//         Arrays.sort(numbers, new myComparator());
//         if (numbers[0] == 0) return "0";
        
//         StringBuilder sb = new StringBuilder();
//         for (int i = 0; i < numbers.length; i++) {
//             sb.append(numbers[i]);
//         }
//         return sb.toString();
//     }
    
//     class myComparator implements Comparator<Integer> {
//     @Override
//         public int compare(Integer a, Integer b) {
//             String sa = String.valueOf(a);
//             String sb = String.valueOf(b);
//             String ca = sa + sb;
//             String cb = sb + sa;
//             return cb.compareTo(ca);
//         }
//     }
    
    public String largestNumber(int[] nums) {
        String[] strs = new String[nums.length];
        for (int i = 0; i < nums.length; i++) {
            strs[i] = String.valueOf(nums[i]);
        }
        Arrays.sort(strs, new MyComparator());
        if (strs[0].equals("0")) return "0";
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < strs.length; i++) {
            sb.append(strs[i]);
        }
        return sb.toString();
    }
    
    class MyComparator implements Comparator<String> {
        @Override
        public int compare(String a, String b) {
            String newA = a + b;
            String newB = b + a;
            return newB.compareTo(newA);
        }
    }
}
