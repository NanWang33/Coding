class Solution {
    //Sort
//     public int longestConsecutive(int[] nums) {
//         if (nums == null || nums.length == 0) return 0;
        
//         Arrays.sort(nums);
//         int max = 1;
//         int count = 1;
//         for (int i = 1 ; i < nums.length; i++) {
//             if (nums[i] == nums[i-1]) continue;
//             if (nums[i] == nums[i-1] + 1) count++;
//             else {
//                 max = Math.max(max, count);
//                 count = 1;
//             }
//         }
//         return Math.max(max, count);
//     }
    
    public int longestConsecutive(int[] nums) {
        Set<Integer> set = new HashSet<Integer>();
        for (int num : nums) {
            set.add(num);
        }
        
        int max = 0;
        for (int num : set) {
            //find start node of each consecutive group
            if (!set.contains(num - 1)) {
                int count = 1;
                int cur = num;
                while (set.contains(cur+1)) {
                    cur++;
                    count++;
                }
                max = Math.max(max, count);
            }
        }
        return max;
    }
}
