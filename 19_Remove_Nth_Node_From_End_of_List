/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {

    //19ms, hashtable to save index
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if (head == null) return null;
        
        HashMap<Integer, ListNode> map = new HashMap<Integer, ListNode>();
        ListNode index = head;
        int count = 0;
        
        while(index != null) {
            map.put(count, index);
            index = index.next;
            count++;
        }
        
        int toRemove = count - n;
        
        if (toRemove == 0) return head.next;
        else if (toRemove < 0) return head;
        else {
            ListNode before = map.get(toRemove - 1);
            ListNode after = map.get(toRemove + 1);
            before.next = after;
            return head;
        }
    }
   
    //14ms, maintain two pointers
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode first = dummy;
        ListNode second = dummy;
        // Advances first pointer so that the gap between first and second is n nodes apart
        for (int i = 1; i <= n; i++) {
            first = first.next;
        }
        // Move first to the end, maintaining the gap
        while (first.next != null) {
            first = first.next;
            second = second.next;
        }
        second.next = second.next.next;
        return dummy.next;
    }
}
