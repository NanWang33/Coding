class Solution {
    public int orangesRotting(int[][] grid) {
        Queue<int[]> queue = new LinkedList<int[]>();
        boolean fresh = false;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 2) queue.add(new int[]{i, j});
                if (grid[i][j] == 1) fresh = true;
            }
        }
        if (queue.isEmpty()) return fresh ? -1 : 0;
        
        int step = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0 ; i < size; i++) {
                int[] cur = queue.poll();
                int x = cur[0];
                int y = cur[1];
                if (x > 0 && grid[x-1][y] == 1) {
                    grid[x-1][y] = 2;
                    queue.add(new int[]{x-1, y});
                }
                if (x < grid.length-1 && grid[x+1][y] == 1) {
                    grid[x+1][y] = 2;
                    queue.add(new int[]{x+1, y});
                }
                if (y > 0 && grid[x][y-1] == 1) {
                    grid[x][y-1] = 2;
                    queue.add(new int[]{x, y-1});
                }
                if (y < grid[0].length-1 && grid[x][y+1] == 1) {
                    grid[x][y+1] = 2;
                    queue.add(new int[]{x, y+1});
                }
            }
            step++;
        }
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 1) return -1;
            }
        }
        return step-1;
    }
}
