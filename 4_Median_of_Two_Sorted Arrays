class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if (nums1.length > nums2.length) {
            int[] tmp = nums1;
            nums1 = nums2;
            nums2 = tmp;
        }
        
        int i = 0; 
        int j = 0;
        int half = (nums1.length + nums2.length + 1) / 2;
        
        int left = 0;
        int right = nums1.length;
        
        while (left <= right) {
            i = (left + right) / 2;
            j = half - i;
            
            if (i < nums1.length && nums2[j - 1] > nums1[i]) {
                left = i + 1;
            } else if (i > 0 && nums1[i - 1] > nums2[j]) {
                right = i - 1;
            } else {
                int maxLeft = 0;
                int minRight = 0;
                if (i == 0) maxLeft = nums2[j - 1];
                else if (j == 0) maxLeft = nums1[i - 1];
                else maxLeft = Math.max(nums1[i - 1], nums2 [j - 1]);
                //why check this here? if not, line 33 could be out of bound
                if ((nums1.length + nums2.length) % 2 == 1) return maxLeft;
                
                if (i == nums1.length) minRight = nums2[j];
                else if (j == nums2.length) minRight = nums1[i];
                else minRight = Math.min(nums1[i], nums2[j]);
                
                return (maxLeft + minRight) / 2.0;
                
            }
        }
        
        return 0.0;
    }
}
