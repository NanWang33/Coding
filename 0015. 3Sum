15. 3Sum

// Three ways:
// 1. sorted two pointers
// 2. sorted hashtable
// 3. un-sorted

class Solution {

    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (nums == null || nums.length == 0) return res;
        //sort the array first
        Arrays.sort(nums);
        
        for (int i = 0; i < nums.length-2; i++) {
            //don't forgot to skip duplicates
            if (i == 0 || i - 1 >= 0 && nums[i] != nums[i-1]){
                int target = 0-nums[i];
                //perform two sum 
                int s = i + 1;
                int e = nums.length - 1;
                while (s < e) {
                    if (nums[s] + nums[e] == target) {
                        List<Integer> one = new ArrayList<Integer>();
                        one.add(nums[i]);
                        one.add(nums[s]);
                        one.add(nums[e]);
                        res.add(one);
                        while (s < e && nums[s] == nums[s+1]) s++;
                        while (s < e && nums[e] == nums[e-1]) e--;
                        s++;
                        e--;
                    }
                
                    else if (nums[s] + nums[e] > target) e--;
                    else s++;
                }
            }
            
        }
        return res;
    }
    
   public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        for (int i = 0; i < nums.length && nums[i] <= 0; ++i)
            if (i == 0 || nums[i - 1] != nums[i]) {
                twoSum(nums, i, res);
            }
        return res;
    }
    void twoSum(int[] nums, int i, List<List<Integer>> res) {
        var seen = new HashSet<Integer>();
        for (int j = i + 1; j < nums.length; ++j) {
            int complement = -nums[i] - nums[j];
            if (seen.contains(complement)) {
                res.add(Arrays.asList(nums[i], nums[j], complement));
                while (j + 1 < nums.length && nums[j] == nums[j + 1])
                    ++j;
            }
            seen.add(nums[j]);
        }
    }
    
    public List<List<Integer>> threeSum(int[] nums) {
        Set<List<Integer>> res = new HashSet<>();
        Set<Integer> dups = new HashSet<>();
        Map<Integer, Integer> seen = new HashMap<>();
        for (int i = 0; i < nums.length; ++i)
            if (dups.add(nums[i])) {
                for (int j = i + 1; j < nums.length; ++j) {
                    int complement = -nums[i] - nums[j];
                    if (seen.containsKey(complement) && seen.get(complement) == i) {
                        List<Integer> triplet = Arrays.asList(nums[i], nums[j], complement);
                        Collections.sort(triplet);
                        res.add(triplet);
                    }
                    seen.put(nums[j], i);
                }
            }
        return new ArrayList(res);
    }
}
