/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        Stack<TreeNode> stack = new Stack<TreeNode>();
        LinkedList<Integer> res = new LinkedList<Integer>();
        
        if (root == null) return res;
        
        stack.push(root);
        while(!stack.empty()) {
            TreeNode node = stack.pop();
            res.addFirst(node.val);
            
            if (node.left != null) {
                stack.push(node.left);
            }
            if (node.right != null) {
                stack.push(node.right);
            }

        }
        return res;
    }
    
//     public List<Integer> postorderTraversal(TreeNode root) {
//         Stack<TreeNode> stack = new Stack<TreeNode>();
//         List<Integer> res = new ArrayList<Integer>();
        
//         if (root == null) return res;
        
//         TreeNode pre = null;
//         while(!stack.empty() || root != null) {
//             if (root != null) {
//                 stack.push(root);
//                 root = root.left;
//             } else {
//                 TreeNode node = stack.peek();
//                 if (node.right != null && pre != node.right) {
//                     root = node.right;
//                 } else {
//                     pre = stack.pop();
//                     res.add(node.val);
//                 }
//             }
            
//         }
//         return res;
//     }
}
