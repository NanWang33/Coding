/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    // public List<List<Integer>> pathSum(TreeNode root, int sum) {
    //     List<List<Integer>> res = new ArrayList<List<Integer>>();
    //     if (root == null) return res;
    //     if (root.left == null && root.right == null) {
    //         if (root.val != sum) return res;
    //         List<Integer> newOne = new ArrayList<Integer>();
    //         newOne.add(root.val);
    //         res.add(newOne);
    //     }
    //     if (root.left != null) {
    //         List<List<Integer>> pre = pathSum(root.left, sum - root.val);
    //         for (List<Integer> one : pre) {
    //             List<Integer> newOne = new ArrayList<Integer>();
    //             newOne.add(root.val);
    //             newOne.addAll(one);
    //             res.add(newOne);
    //         }
    //     }
    //     if (root.right != null) {
    //         List<List<Integer>> pre = pathSum(root.right, sum - root.val);
    //         for (List<Integer> one : pre) {
    //             List<Integer> newOne = new ArrayList<Integer>();
    //             newOne.add(root.val);
    //             newOne.addAll(one);
    //             res.add(newOne);
    //         }
    //     }
    //     return res;
    // }
    
    public void pathSumInner(TreeNode root, int sum, List<Integer>path, List<List<Integer>> result) {
        path.add(root.val);
        if(root.left == null && root.right == null){
            if(sum == root.val) result.add(new ArrayList<Integer>(path));
        }
        if(root.left!=null) pathSumInner(root.left, sum-root.val, path, result);
        if(root.right!=null)pathSumInner(root.right, sum-root.val, path, result);
        path.remove(path.size()-1);
    }

    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> resultList = new ArrayList<List<Integer>>();
        if(root==null) return resultList;
        List<Integer> currentPath = new ArrayList<Integer>();
        pathSumInner(root, sum, currentPath, resultList);
        return resultList;
    }
}
