/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {

    //57ms O(m+n)
    public ListNode addTwoNumbers0(ListNode l1, ListNode l2) {
        
        ListNode index = null;
        ListNode res = null;
        int add = 0;
        
        while (l1 != null || l2 != null) {
            int sum = add + (l1 == null ? 0 : l1.val) + (l2 == null ? 0 : l2.val);
            if (sum > 9) {
                sum = sum - 10;
                add = 1;
            } else {
                add = 0;
            }
            if (index == null) {
                index = new ListNode(sum);
                res = index;
            } else {
                index.next = new ListNode(sum);
                index = index.next;
            }
            
            l1 = l1 == null ? null : l1.next; (don't forgot to check != null)
            l2 = l2 == null ? null : l2.next;
        }
        
        if (add > 0) index.next = new ListNode(1);
        return res;
    }
    
    //Using dummy head node
    public ListNode addTwoNumbers1(ListNode l1, ListNode l2) {
        ListNode dummyHead = new ListNode(0);
        ListNode p = l1, q = l2, curr = dummyHead;
        int carry = 0;
        while (p != null || q != null) {
            int x = (p != null) ? p.val : 0;
            int y = (q != null) ? q.val : 0;
            int sum = carry + x + y;
            carry = sum / 10;
            curr.next = new ListNode(sum % 10);
            curr = curr.next;
            if (p != null) p = p.next;
            if (q != null) q = q.next;
        }
        if (carry > 0) {
            curr.next = new ListNode(carry);
        }
        return dummyHead.next;
    }
    
}
