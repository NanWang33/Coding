class Solution {
    // DP, TIME OUT
    // public int jump(int[] nums) {
    //     int[] dp = new int[nums.length];
    //     dp[0] = 0;
    //     for (int i = 1; i < nums.length; i++) {
    //         int min = Integer.MAX_VALUE;
    //         for(int j = 0; j < i; j++) {
    //             if (dp[j] >= 0 && nums[j] >= i - j) {
    //                 min = Math.min(min, dp[j] + 1);
    //             }
    //         }
    //         dp[i] = min;
    //     }
    //     return dp[nums.length-1];
    // }
    
    public int jump(int[] nums) {
        int curFar = 0;
        int curEnd = 0;
        int jump = 0;
        for (int i = 0; i < nums.length - 1; i++) {
            curFar = Math.max(curFar, i + nums[i]);
            if (i == curEnd) {
                jump++;
                curEnd = curFar;
            }
        }
        return jump;
    }

}
