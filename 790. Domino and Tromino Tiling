class Solution {
    public int numTilings(int N) {
//         long[][] dp = new long[N][3];
//         dp[0][0] = 1;
//         dp[0][1] = 0;
//         dp[0][2] = 0;
//         if (N == 1) return 1;
//         dp[1][0] = 2;
//         dp[1][1] = 1;
//         dp[1][2] = 1;
//         if (N == 2) return 2;

//         long mod = 1000000007;
//         //dp[i][1] always equals to dp[i][2]
//         for (int i = 2; i < N; i++) {
//             dp[i][0] = (dp[i-1][0] + dp[i-2][0] + dp[i-1][1] + dp[i-1][2])%mod;
//             dp[i][1] = (dp[i-2][0] + dp[i-1][2])%mod;
//             dp[i][2] = (dp[i-2][0] + dp[i-1][1])%mod;
//         }
//         return (int)dp[N-1][0];
        
        
        
//         long[][] dp = new long[N][2];
//         dp[0][0] = 1;
//         dp[0][1] = 0;
//         if (N == 1) return 1;
//         dp[1][0] = 2;
//         dp[1][1] = 1;
//         if (N == 2) return 2;

//         long mod = 1000000007;
//         //dp[i][1] always equals to dp[i][2]
//         for (int i = 2; i < N; i++) {
//             dp[i][0] = (dp[i-1][0] + dp[i-2][0] + dp[i-1][1] * 2)%mod;
//             dp[i][1] = (dp[i-2][0] + dp[i-1][1])%mod;
//         }
//         return (int)dp[N-1][0];
        
        
        
        
        int a = 0; //i-3
        int b = 1; //i-2
        int c = 1; //i-1
        int d = 0; //i
        int mod = 1000000007;
 
        for (int i = 1; i < N; i++) {
            d = (2 * c % mod + a) % mod;
            a = b;
            b = c;
            c = d;
        }
        return c;

    }
}
