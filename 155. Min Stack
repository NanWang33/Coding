class MinStack {

//     private int min = Integer.MAX_VALUE;
//     private Stack<Integer> stack = new Stack<Integer>();
//     private PriorityQueue<Integer> queue = new PriorityQueue<Integer>();
    
//     /** initialize your data structure here. */
//     public MinStack() {
        
//     }
    
//     public void push(int x) {
//         stack.push(x);
//         queue.add(x);
//     }
    
//     public void pop() {
//         int val = stack.pop();
//         queue.remove(val);
//     }
    
//     public int top() {
//         return stack.peek();
//     }
    
//     public int getMin() {
//         return queue.peek();
//     }
    
    
    /** initialize your data structure here. */
    //Use one stack, push twice when min get changed
    private int min = Integer.MAX_VALUE;
    private Stack<Integer> stack = new Stack<Integer>();
    public MinStack() {
        
    }
    
    public void push(int x) {
        if(x > min) stack.push(x);
        else {
            stack.push(min);
            stack.push(x);
            min = x;
        }
    }
    
    public void pop() {
        if (stack.pop() == min) min = stack.pop();
    }
    
    public int top() {
        return stack.peek();
    }
    
    public int getMin() {
        return min;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
