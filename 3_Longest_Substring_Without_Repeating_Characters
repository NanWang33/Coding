class Solution {

    //143ms O(n^2)
    public int lengthOfLongestSubstring0(String s) {
        Set<Character> res = new HashSet<Character>();
        int length = 0;
        
        int index = 0;
        while (index + length - 1 < s.length()) {
            for (int i = index; i < s.length(); i++) {
                char c = s.charAt(i);
                if (res.contains(c)) {
                    break;
                } else {
                    res.add(c);
                }
            }
            length = res.size() > length ? res.size() : length;
            res = new HashSet<Character>();
            index++;
        }
        return length;
    }
    
    //Don't rewrite the hashset, simply remove the first element
    //81ms O(n)
    public int lengthOfLongestSubstring1(String s) {
        Set<Character> res = new HashSet<Character>();
        int length = 0;
        int i = 0;
        int j = 0;
        while (i < s.length() && j < s.length()) {
            if (res.contains(s.charAt(j)) {
                res.remove(s.charAt(i));
                i++;
            } else {
                res.add(s.charAt(j));
                length = res.size() > length ? res.size() : length;
                j++;
            }
        }
        return length;
    }
    
}
