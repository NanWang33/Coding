/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int[] findFrequentTreeSum(TreeNode root) {
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        int max = 0;
        helper(root, map);
        List<Integer> res = new ArrayList<Integer>();
        for (Integer val : map.values()) {
            if (val > max) max = val;
        }
        for (Integer key : map.keySet()) {
            if (map.get(key) == max) res.add(key);
        }
        int[] result = new int[res.size()]; 
        for (int i = 0; i < res.size(); i++) {
            result[i] = res.get(i);
        }
        return result;
    }
    
    private int helper(TreeNode root, HashMap<Integer, Integer> map) {
        if (root == null) return 0;
        int left = helper(root.left, map);
        int right = helper(root.right, map);
        int sum = left + right + root.val;
        map.put(sum, map.getOrDefault(sum, 0) + 1);
        return sum;
    }
}
