class Solution {
    
    //dfs, time out
    public boolean canJump(int[] nums) {
        return dfs(nums, 0, nums.length - 1);
    }
    
    private boolean dfs(int[] nums, int start, int end) {
        if (start == end) return true;
        if (start > end) return false;
        
        int step = nums[start];
        
        for (int i = 1; i <= step; i++) {
            if (dfs(nums, i + start, end)) return true;
        }
        return false;
    }
    
    //greedy, 9ms, O(n)
    public boolean canJump1(int[] nums) {
        int lastPos = nums.length - 1;
        for (int i = nums.length - 1; i >= 0; i--) {
            if (i + nums[i] >= lastPos) {
                lastPos = i;
            }
        }
        return lastPos == 0;
    }
}
