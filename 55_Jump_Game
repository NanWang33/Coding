class Solution {
    // Dynamic Programming, O(n^2)
    // public boolean canJump(int[] nums) {
    //     boolean[] dp = new boolean[nums.length];
    //     dp[0] = true;
    //     for(int i = 1; i < nums.length; i++) {
    //         for (int j = 0; j < i; j++) {
    //             if (dp[j]) {
    //                 if (nums[j] >= i - j){
    //                     dp[i] = true; 
    //                     break;
    //                 } 
    //             }
    //         }
    //     }
    //     return dp[nums.length-1];
    // }
    
    //greedy, 9ms, O(n)
    public boolean canJump1(int[] nums) {
        int lastPos = nums.length - 1;
        for (int i = nums.length - 1; i >= 0; i--) {
            if (nums[i] >= lastPos - i) lastPos = i;
        }
        return lastPos == 0;
    }
}
