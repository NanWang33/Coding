class Solution {
        //Recursive, TimeOut
//     public boolean isMatch(String s, String p) {
//         if (s == null || p == null) return false;
//         if (s.isEmpty()) {
//             if (p.isEmpty()) return true;
//             if (p.startsWith("*")) return isMatch(s, p.substring(1));
//             else return false;
//         }
//         if (p.isEmpty()) return false;
        
//         char ss = s.charAt(0);
//         char pp = p.charAt(0);
        
//         if (pp != '*' && pp != '?') {
//             return pp == ss && isMatch(s.substring(1), p.substring(1));
//         } else if (pp == '?') {
//             return isMatch(s.substring(1), p.substring(1));
//         } else {
//             String restP = p.substring(1);
//             for (int i = 0; i <= s.length(); i++) {
//                 if (isMatch(s.substring(i), restP)) return true;
//             }
//             return false;
//         }
//     }
    
    
    public boolean isMatch(String s, String p) {
        boolean[][] dp = new boolean[s.length()+1][p.length()+1];
        //if s and p are both empty, return true
        dp[0][0] = true;
        for (int j = 1; j <= p.length(); j++) {
            if(p.charAt(j-1) != '*') break;
            dp[0][j] = true;
        }
        
        for(int i = 1; i <= s.length(); i++) {
            char ss = s.charAt(i-1);
            for (int j = 1; j <= p.length(); j++) {
                char pp = p.charAt(j-1);
                if (pp != '*' && pp != '?') {
                    dp[i][j] = (pp == ss) && dp[i-1][j-1];
                } else if(pp == '?') {
                    dp[i][j] = dp[i-1][j-1];
                } else {
                    //don't need this loop
                    // for (int k = 0; k <= i; k++) {
                    //     if (dp[k][j-1]) {
                    //         dp[i][j] = true;
                    //         break;
                    //     }
                    // }
                    dp[i][j] = dp[i-1][j] || dp[i][j-1];
                }
            }
        }
        return dp[s.length()][p.length()];
    }
}
