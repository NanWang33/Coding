/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val,List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        Queue<Node> queue = new LinkedList<Node>();
        if (root == null) return res;
        
        queue.offer(root);
        while(!queue.isEmpty()) {
            int size = queue.size();
            List<Integer> cur = new ArrayList<Integer>();
            for (int i = 0; i < size; i++) {
                Node n = queue.poll();
                cur.add(n.val);
                for (Node child : n.children) {
                    if (child != null) queue.offer(child);
                }
            }
            res.add(cur);
        }
        return res;
    }
}
