class Solution {

    //26ms, DFS
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<Integer> one = new ArrayList<Integer>();
        List<List<Integer>> res  = new ArrayList<List<Integer>>();
        if(candidates == null || candidates.length==0) return res; 
        Arrays.sort(candidates);
        dfs(candidates, one, res, target, 0);
        return res;
    }
    
    public void dfs(int[] candidates, List<Integer> one, List<List<Integer>> res, int target, int index) {
        if (target < 0) return;
        if (target == 0) {
            res.add(new ArrayList<Integer>(one));
            return;
        }
        
        for (int i = index; i < candidates.length; i++) {
            int val = candidates[i];
            one.add(val);
            dfs(candidates, one, res, target - val, i);
            one.remove(one.size() - 1);
            
        }
    }
}
