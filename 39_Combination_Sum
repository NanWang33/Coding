class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> cur = new ArrayList<Integer>();
        Arrays.sort(candidates);
        dfs(candidates, 0, target, cur, res);
        
        return res;
    }
    
    private void dfs(int[] nums, int depth, int target, List<Integer> cur, List<List<Integer>> res) {
        if (target == 0) {
            res.add(new ArrayList<Integer>(cur));
            return;
        }
        for (int i = depth; i < nums.length; i++) {
            if (nums[i] > target) break;
            cur.add(nums[i]);
            dfs(nums, i, target - nums[i], cur, res);
            cur.remove(cur.size()-1);
        }
    }
}

